
#maxint=1000.

trajectory(low).
trajectory(high).
%trajectory(high) :- not birdType(yellowbird).

% Changed the likelihood to numbers, so that we can use arithmetic predicates.
likelihood(4).  % very likely
likelihood(3).  % likely
likelihood(2).  % uncertain
likelihood(1).  % might happen
likelihood(0).  % not likely
type(pig).
type(ground).
type(ice).
type(wood).
type(stone).

%
% Percentage perturbations on tap time depending on bird type
%
%
%
tap(110) :- birdType(redbird).
tap(95)  :- birdType(yellowbird).
tap(85)  :- birdType(bluebird).
tap(120) :- birdType(blackbird).
tap(80)  :- birdType(whitebird).


% likelihoodtable(bird, material, hitorder, value).
likelihoodtable(bluebird,ice,0,4).
likelihoodtable(bluebird,ice,1,4).
likelihoodtable(bluebird,ice,2,1).
likelihoodtable(bluebird,ice,3,1).
likelihoodtable(bluebird,ice,4,1).
%
likelihoodtable(bluebird,wood,0,3).
likelihoodtable(bluebird,wood,1,2).
likelihoodtable(bluebird,wood,2,1).
likelihoodtable(bluebird,wood,3,0).
likelihoodtable(bluebird,wood,4,0).

likelihoodtable(yellowbird,wood,0,4).
likelihoodtable(yellowbird,wood,1,4).
likelihoodtable(yellowbird,wood,2,4).
likelihoodtable(yellowbird,wood,3,4).
likelihoodtable(yellowbird,wood,4,3).
%
likelihoodtable(redbird,wood,0,4).
likelihoodtable(redbird,wood,1,3).
likelihoodtable(redbird,wood,2,2).
likelihoodtable(redbird,wood,3,1).
likelihoodtable(redbird,wood,4,0).

%
likelihoodtable(redbird,ice,0,4).
likelihoodtable(redbird,ice,1,2).
likelihoodtable(redbird,ice,2,0).
likelihoodtable(redbird,ice,3,0).
likelihoodtable(redbird,ice,4,0).

likelihoodtable(blackbird,stone,0,4).
likelihoodtable(blackbird,stone,1,3).
likelihoodtable(blackbird,stone,2,2).
likelihoodtable(blackbird,stone,3,1).
likelihoodtable(blackbird,stone,4,0).

likelihoodtable(blackbird,wood,0,3).
likelihoodtable(blackbird,wood,1,2).
likelihoodtable(blackbird,wood,2,1).
likelihoodtable(blackbird,wood,3,0).
likelihoodtable(blackbird,wood,4,0).

likelihoodtable(blackbird,ice,0,4).
likelihoodtable(blackbird,ice,1,4).
likelihoodtable(blackbird,ice,2,4).
likelihoodtable(blackbird,ice,3,4).
likelihoodtable(blackbird,ice,4,4).


nogoodForStone(redbird).
nogoodForStone(yellowbird).
nogoodForStone(bluebird).
likelihoodtable(B,stone,X,1) :- nogoodForStone(B), X >= 0, X <= 4, #int(X).
 

%
% Default rules
%
existLikelihoodtable(B,M,Y) :- likelihoodtable(B,M,Y,_).

stability(V,O) :- &stability[W,H,A](V), object(O,_,_,_,W,H,A).

stable(O) :- stability(V,O), V > 25.
verystable(O) :- stability(V,O), V > 50.
heavy(O) :- &on_top_mass[O,objects](M), M > 100, object(O,_,_,_,_,_,_).

%
% When targeting X, Z is the Y-th object hit in the trajectory T (starts from 0).
% 
% For performance, this graph is built only for trajectories directed to shootable targets.
%
next(X,Y,Z,T) :- shootable(X,T), &next[X,T,V,Sx,Sy,Sw,Sh,object](Y,Z),  velocity(V), slingshot(Sx,Sy,Sw,Sh), trajectory(T).
shootable(O, T) :- &next[O,T,V,Sx,Sy,Sw,Sh,object](0,O),  velocity(V), object(O,_,_,_,_,_,_), slingshot(Sx,Sy,Sw,Sh), trajectory(T).

% This part sees to it that for every answer set exactly one target is generated.

target(O, T, Time) v not_target(O, T, Time) :- shootable(O, T), tap(Time).
targetDebug(O,T) :- target(O,T,_).

:- target(X, _, _), target(Y, _, _), X != Y.
:- target(_, T1, _), target(_, T2, _), T1 != T2.
%
% Disabled for performance reasons. We assume there is always ONLY ONE TAP TIME AVAILABLE
%
%:- target(_, _, T1), target(_, _, T2), T1 != T2.
target_exists :- target(_,_,_).
:- not target_exists.

%reduceLikelihood_next(O, Previous Object, Likelihood, ReducedL) reduces the likelihood of an object falling, based on info about the object and its predecessor in the trajectory.
reduceLikelihood_next(O, Prev, L, RL) :- reduceLikelihood(O,L,RL), object(Prev,pig,_,_,_,_,_).
reduceLikelihood_next(O, Prev, L, RL) :- reduceLikelihood(O,L,R1L), object(Prev,T,_,_,W,H,A), T != pig, T != ice, RL = R1L - 1, not verystable(Prev).

%reduceLikelihood(O, Likelihood, ReducedL) reduces the likelihood of falling, based on properties of the object O.
reduceLikelihood(O, L, L) :- not stable(O), not heavy(O), object(O,_,_,_,_,_,_), likelihood(L).
reduceLikelihood(O, L, RL) :- not stable(O), heavy(O), object(O,_,_,_,_,_,_), likelihood(L), likelihood(RL), RL = L - 1.
reduceLikelihood(O, L, RL) :- stable(O), not heavy(O), object(O,_,_,_,_,_,_), likelihood(L), likelihood(RL), RL = L - 1.
reduceLikelihood(O, L, RL) :- stable(O), heavy(O), object(O,_,_,_,_,_,_), likelihood(L), likelihood(RL), RL = L - 2.

% An object, that is hit will fall,
% if it is either a pig (direct destruction),

fallsnext(O, 4) :- target(O,_,_), object(O,pig,_,_,_,_,_).
fallsnext(O, 4) :- target(O,_,_), object(O,ice,_,_,_,_,_), not birdType(yellowbird).
fallsnext(O, RL) :- target(O,_,_), object(O,Type,_,_,W,H,A), Type != pig, Type != ice, reduceLikelihood(O, 4, RL).

%
% In the absense of information about the current bird/material likelihood we behave as before.
%
%fallsnext(B, RedL) :- birdType(Bird), not existsLikelihoodtable(Bird,Material,Y), reduceLikelihood_next(B,Prev,Likelihood,RedL), 
%                      object(B,Material,_,_,_,_,_),
%                      object(Prev,_,_,_,_,_,_), 
%                      fallsnext(A, Likelihood),
%                      next(T,X,A,Tr), 
%                       Y = X+1, 
%                      next(T,Y,B,Tr),
%                      target(T, Tr,_).

%
% Otherwise we use domain knowledge (recall we have hardwired tables up to the 4th consecutive object)
%
fallsnext(B, N) :- birdType(Bird), likelihoodtable(Bird,Material,Y,N), 
                      object(B,Material,_,_,_,_,_),
                      fallsnext(A, Likelihood),
                      next(T,X,A,Tr), 
                       Y = X+1, 
                      next(T,Y,B,Tr),
                      target(T, Tr,_).



%If an object falls, all objects that rest on it, will also fall.
%Does not work:
%falls(X,Likelihood) :- falls(Y,Likelihood), object(X,_,_,_,_,_,_), object(Y,_,_,_,_,_,_), &on_top_of[X,Y,object].
%Workaround:
%ot(X,Y) :- object(X,_,_,_,_,_,_), object(Y,_,_,_,_,_,_), &on_top_of[X,Y,object].
%
% Much faster, only one call per program.
%
ot(X,Y) :- &on_top_all[object](X,Y).
fallsontop(X,L) :- fallsnext(Y,L), ot(X,Y).
fallsontop(X,L) :- fallsontop(Y,L), ot(X,Y).

firstabove(X,A) :- &firstabove[X,object](A), object(X,pig,_,_,_,_,_).

% An object falls on a pig.
fallsfromabove(X,L) :- object(X,pig,_,_,_,_,_), fallsontop(A,L), firstabove(X,A).
fallsfromabove(X,L) :- object(X,pig,_,_,_,_,_), fallsnext(A,L), firstabove(X,A).
fallsfromabove(X,L) :- object(X,pig,_,_,_,_,_), fallsfromabove(A,L), firstabove(X,A).

%
% falls(Object,Likelihood)
%
% The following section creates a unified predicate falls(O, L) from the other objects.
%
% Fallsnext:      based on trajectory.
% Fallsontop:     based on statical analysis (on_top_of and on_top_all simulations)
% Fallsfromabove: graph of falls starting from pigs and above, closes using &firstabove 

falls(O,L) :- fallsnext(O,L), falls(O, L2), not L2 > L.
falls(O,L) :- fallsnext(O,L), not existsOtherLikelihood(O,L).

falls(O,L) :- fallsontop(O,L), falls(O, L2), not L2 > L.
falls(O,L) :- fallsontop(O,L), not existsOtherLikelihood(O,L).
falls(O,L) :- fallsfromabove(O,L), falls(O, L2), not L2 > L.
falls(O,L) :- fallsfromabove(O,L),  not existsOtherLikelihood(O,L).

existsOtherLikelihood(O,L) :- likelihood(L), falls(O,L1), L1 != L.


% Now we give malus points for pigs that have not fallen or are not likely to fall. For each pig that does not fall, the answer set gets 5 malus points, if the pig falls with remote probability it gets 4 malus points and so on. If a pig falls certainly, the answer set gets no malus points for the pig.
hasSomeFallLikelihood(P) :- falls(P,_).
:~ object(P,pig,X,Y,W,H,A), not hasSomeFallLikelihood(P). [5:3]
:~ object(P,pig,X,Y,W,H,A), falls(P,Prob), Malu = 4-Prob. [Malu:3]

% Tie breaker: If there are multiple equal answer sets, we select the one where most stuff falls.
:~ object(P,Type,X,Y,W,H,A), not hasSomeFallLikelihood(P). [5:2]
:~ object(P,Type,X,Y,W,H,A), falls(P,Prob), Malu = 4-Prob. [Malu:2]

