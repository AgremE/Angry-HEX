#maxint=10000.
%
% This part sees to it that for every answer set exactly one target is generated.
%
% Trajectories are now, high, low, egg
%
trajectory(low).
trajectory(high).
trajectory(egg) :- birdType(whitebird).

target(O, T) v not_target(O, T) :- veryShootable(O, T).

:- target(X, _), target(Y, _), X != Y.
:- target(_, T1), target(_, T2), T1 != T2.
%
%
:- tap(T1), tap(T2), T1 != T2.
target_exists(a) :- target(_,_).
:- not target_exists(a).

% Ensure that we generate targets in 'egg mode'
target_exists(egg) :- targetData(_,_,_,_,1).
:- not target_exists(egg).

%
%  NEW OUTPUT PREDICATE IS targetData
% 
% DISABLE this rule because we are looking for targets with 'egg mode'
% targetData(X,Y,Z,T,0) :- target(X,Y), offset(T), tap(Z), Y != egg.

%
% In egg mode, we will tap and offset this way
%
%
% Last attribute denotes eggmode
%
targetData(O,T,98,Y,1) :- target(O,egg), preferredbirdEggTrajectory(O,X,Y,T).

preferredbirdEggTrajectory(O,X,Y,low) :- eggShootable(O,X,Y,low), eggShootable(O,X1,Y1,high).
preferredbirdEggTrajectory(O,X,Y,low) :- eggShootable(O,X,Y,low), not hasHighSEggShoot(O).
preferredbirdEggTrajectory(O,X,Y,high) :- eggShootable(O,X,Y,high), not hasLowEggShoot(O).

hasHighEggShoot(O) :- eggShootable(O,X,Y,high).
hasLowEggShoot(O) :- eggShootable(O,X,Y,low).

shouldCompute :- birdType(whitebird).

offset(Upper)   :-  shootable(O,low,_,Upper),  target(O,low), instability(O,I). %, I >= 80.
%offset(Center)  :-  shootable(O,low,Center,_),  target(O,low), instability(O,I), I < 80.
offset(Center)  :-  shootable(O,high,Center,_),  target(O,high).

%
% Debug check
%
%:- offset(A), offset(B), A != B.

%
% When targeting X, Z is the Y-th object hit in the trajectory T (starts from 0).
% 
% For performance, this graph is built only for trajectories directed to shootable targets and for trajectories directed to pigs
% When the birdtype is whitebird, next is enriched with egg trajectories.
%
next(X,Y,Z,T,Center) :- shootable(X,T,Center,_), &next[X,Center,T,V,Sx,Sy,Sw,Sh,boundingBox](Y,Z), velocity(V), slingshot(Sx,Sy,Sw,Sh), trajectory(T), T != egg.
next(X,Y,Z,T,Upper)  :- shootable(X,T,_,Upper),  &next[X,Upper,T,V,Sx,Sy,Sw,Sh,boundingBox](Y,Z), velocity(V), slingshot(Sx,Sy,Sw,Sh), trajectory(T), T != egg.


trajectoryWhite(low).
trajectoryWhite(high).

eggShootable_(Obj,X) :- &clearsky[Obj,boundingBox](1), shouldCompute, ngobject(Obj,_,X,_,_,_,_).
eggShootable(Obj,X,Y,T) :- eggShootable_(Obj,X), &bestwhite[Obj,T,V,Sx,Sy,Sw,Sh,boundingBox](Y), 
                         boundingBox(Obj,_,X,_,_,_,_), velocity(V), slingshot(Sx,Sy,Sw,Sh), trajectoryWhite(T).

%
% Dummy out of screen target.
%
boundingBox(1000, ice, 600, 100, 10, 10,"0.0"). 
                     
madWhiteSlingshot(O,X,Y,W,H) :- slingshot(_,_,W,H), eggShootable(O,X,Y1,_), Y = Y1 - 10.
nextMadWhite(1000,Y,Z) :- &next[1000,Y,high,V,Sx,Sy,Sw,Sh,boundingBox](Y,Z), velocity(V), ngobject(1000,_,_,Y,_,_,_),
                         madWhiteSlingshot(O,Sx,Sy,Sw,Sh), eggShootable(O,_,_,_).

nextEgg(Obj,0,Obj) :- eggShootable(Obj,Off,_,_).
nextEgg(Upmost,X,Down) :- nextEgg(Upmost,Y,Under), X = Y+1, firstbelow(Under,Down), X <= 500, #int(X).

next(Upmost,Y,Obj,egg,Off) :- nextEgg(Upmost,Y,Obj), eggShootable(Upmost,Off,_,_).
next(Upmost,Y,Obj,whitebird,0)   :- nextMadWhite(Upmost,Y,Obj).


shootable(O, T, Shift, Up) :- &shootable[O,T,V,Sx,Sy,Sw,Sh,B,boundingBox](O,Shift,Up),
		           birdType(B),  
                   velocity(V), 
                   objectType(O,Type), 
                   slingshot(Sx,Sy,Sw,Sh), 
                   trajectory(T).

%debugShootable(O, T) :- &next[O,T,V,Sx,Sy,Sw,Sh,boundingBox](0,O),  
%                   velocity(V), 
%                   ngobject(O,_,_,_,_,_,_), 
%                   slingshot(Sx,Sy,Sw,Sh), 
%                   trajectory(T).

veryShootable(O,T) :- shootable(O,T,_,_).
veryShootable(O,egg) :- eggShootable(O,Off).
%veryShootable(Pig, T) :-  
%                     objectType(Pig,pig),
%                     trajectory(T), not groundInTrajectory(Pig,T).
                     
%groundInTrajectory(Pig,T) :- next(Pig,X,Outer,T), objectType(Outer,ground), next(Pig,Y,Pig,T), X < Y.
outerTarget(Outer,Inner,T,Off) :- target(Inner,T), next(Inner,0,Outer,T,Off).
outerTarget(Z,1000,whitebird,0) :- nextMadWhite(1000,0,Z).
                   
hasSomeAbove(O) :- ot(O,Y).

%
% computes probability of direct damage by following trajectory, starts with energy 100
%
directDamage(Obj,P,E) :- outerTarget(Obj,Inner,Tr,_), objectType(Obj,T), birdType(Bird), 
                         damageProbability(Bird,T,P), energyLoss(Bird,T,E), Tr != egg.  

directDamage(Obj,P,E) :- outerTarget(Obj,Inner,egg,_), objectType(Obj,T), 
                         damageProbability(egg,T,P), energyLoss(egg,T,E).  


directDamage(ObjB,P,Energy) :- Tr != egg, outerTarget(ObjC,ObjT,Tr,Off), objectType(ObjB,T_B), objectType(ObjA,T_A), birdType(Bird), 
                     directDamage(ObjA,P_A,Energy_A),
                     energyLoss(Bird,T_A,E_L),
                     En_temp = E_L * Energy_A,
                     Energy = En_temp / 100,
                     Energy_A >= 10,
                     P_A > 0,
                     damageProbability(Bird,T_B,P_B),
                   
                     P_Temp = P_A * P_B, P = P_Temp / 100,
                     
                     next(ObjT,X,ObjA,Tr,Off), 
                     Y = X+1, 
                     next(ObjT,Y,ObjB,Tr,Off).


directDamage(ObjB,P,Energy) :- outerTarget(ObjC,ObjT,egg,Off), objectType(ObjB,T_B), objectType(ObjA,T_A), 
                     directDamage(ObjA,P_A,Energy_A),
                     energyLoss(egg,T_A,E_L),
                     En_temp = E_L * Energy_A,
                     Energy = En_temp / 100,
                     Energy_A >= 10,
                     damageProbability(egg,T_B,P_B),
                     P_A > 0,
                     P_Temp = P_A * P_B, P = P_Temp / 100,
                     
                     next(ObjT,X,ObjA,egg,Off), 
                     Y = X+1, 
                     next(ObjT,Y,ObjB,egg,Off).


instability(O,I) :- &stability[W,H,A](V), boundingBox(O,_,_,_,W,H,A), I = 100-V. 
pushability(O,I) :- instability(O,I), I >= MinPushability, objectType(O,Type), minPushability(Type,MinPushability).

minPushability(wood,70).
minPushability(stone,90).
minPushability(ice,70).
minPushability(pig,0).
minPushability(tnt,20).

%
% the pushDamage chain works only for low trajectories
%
%  pushDamage(Obj,intrinsicDAMAGELikelihood,NextObjectDamageLikelihood)
%
pushDamage(Obj,P,P) :- pushability(Obj,P), outerTarget(Obj,I,low,_).
pushDamage(ObjB,P_A,P) :- outerTarget(ObjC,ObjT,Tr,Off), objectType(ObjB,T_B), objectType(ObjA,T_A), 
                     maxDirectDamage(ObjA,P_A),
                     pushability(ObjB,P_B),
                     P_A > 0,
                     P_Temp = P_A * P_B, P = P_Temp / 100,
                     
                     next(ObjT,X,ObjA,low,Off), 
                     Y = X+1, 
                     next(ObjT,Y,ObjB,low,Off).

pushDamage(ObjB,P_A,P) :-  
                     pushDamage(ObjA,_,P_A),
                     P_A > 0,
					 canPush(ObjA,ObjB),                     
                     pushability(ObjB,P_B),
                     P_Temp = P_A * P_B, P = P_Temp / 100.
                     
%
%  Pushability requires some minimum distance and objects at geometric range
%
canPush(ObjA,ObjB) :- &canpush[ngobject](ObjA,ObjB).

%
%  removal of Y makes X fall in internal simulation
%
ot(Y,X) :- &on_top_all[boundingBox](X,Y).
ot(Y,Z) :- ot(Y,X), ot(X,Z).

fallDamage(Obj,P_N) :- directDamage(RemovedObj,P_R,E),
                     E >= 10, 
                     P_R > 0,
                     ot(RemovedObj,Obj), 
                     objectType(Obj,T), 
                     materialFallImportance(T,P_N),
                     P_temp = P_R * P_N, P = P_temp / 100. 

fallDamage(Obj,P_N) :- pushDamage(RemovedObj,_,P_R), 
					 P_R >= 50,
                     ot(RemovedObj,Obj), 
                     objectType(Obj,T), 
                     materialFallImportance(T,P_N),
                     P_temp = P_R * P_N, P = P_temp / 100. 

fallDamage(Obj,P_N) :- fallDamage(RemovedObj,P_R), 
                     ot(RemovedObj,Obj), 
                     objectType(Obj,T), 
                     materialFallImportance(T,P_N),
                     P_R > 0,
                     P_temp = P_R * P_N, P = P_temp / 100. 


maxFallDamage(Obj,P1) :- fallDamage(Obj,P1), not overFallDamage(Obj,P1).
overFallDamage(Obj,P1) :- fallDamage(Obj,P1), fallDamage(Obj,P2), P2 > P1. 

maxDirectDamage(Obj,P1) :- directDamage(Obj,P1,_), not overDirectDamage(Obj,P1).
overDirectDamage(Obj,P1) :- directDamage(Obj,P1,_), directDamage(Obj,P2,_), P2 > P1. 

maxPushDamage(Obj,P1) :- pushDamage(Obj,P1,_), not overPushDamage(Obj,P1).
overPushDamage(Obj,P1) :- pushDamage(Obj,P1,_), pushDamage(Obj,P2,_), P2 > P1. 

maxPushNDirectDamage(Obj,M) :- maxPushDamage(Obj,M), maxDirectDamage(Obj,M1), M >= M1.
maxPushNDirectDamage(Obj,M1) :- maxPushDamage(Obj,M), maxDirectDamage(Obj,M1), M1 > M.

maxPushNDirectDamage(Obj,M) :- maxPushDamage(Obj,M), not existsDirectDamage(Obj).
maxPushNDirectDamage(Obj,M1) :- not existsPushDamage(Obj), maxDirectDamage(Obj,M1).

existsDirectDamage(Obj) :- directDamage(Obj,_,_).
notExistsDirectDamage(Obj) :- not existsDirectDamage(Obj), objectType(Obj,_).

:~ notExistsDirectDamage(Obj), notExistsPushDamage(Obj), objectType(Obj,tnt). [10:4]
:~ notExistsDirectDamage(Obj), notExistsPushDamage(Obj), objectType(Obj,pig). [10:4]
:~ notExistsDirectDamage(Obj), notExistsPushDamage(Obj). [10:1]

:~ maxPushNDirectDamage(Obj,P), objectType(Obj,tnt), MalusTemp = 100 - P, Malus = MalusTemp / 10. [Malus:4]
:~ maxPushNDirectDamage(Obj,P), objectType(Obj,pig), MalusTemp = 100 - P, Malus = MalusTemp / 10. [Malus:4]
:~ maxPushNDirectDamage(Obj,P), MalusTemp = 100 - P, Malus = MalusTemp / 10. [Malus:1]

existsFallDamage(Obj) :- fallDamage(Obj,_).
notExistsFallsDamage(Obj) :- not existsFallDamage(Obj), objectType(Obj,_).

:~ notExistsFallsDamage(Obj), objectType(Obj,tnt). [10:4]
:~ notExistsFallsDamage(Obj), objectType(Obj,pig). [10:4]
:~ notExistsFallsDamage(Obj). [10:1]

:~ maxFallDamage(Obj,P), objectType(Obj,tnt), MalusTemp = 100 - P, Malus = MalusTemp / 10. [Malus:4]
:~ maxFallDamage(Obj,P), objectType(Obj,pig), MalusTemp = 100 - P, Malus = MalusTemp / 10. [Malus:4]
:~ maxFallDamage(Obj,P), MalusTemp = 100 - P, Malus = MalusTemp / 10. [Malus:1]

existsPushDamage(Obj) :- pushDamage(Obj,_,_).
notExistsPushDamage(Obj) :- not existsPushDamage(Obj), objectType(Obj,_).

%:~ notExistsPushDamage(Obj), objectType(Obj,pig). [10:3]
%:~ notExistsPushDamage(Obj). [10:1]

%:~ maxPushDamage(Obj,P), objectType(Obj,pig), MalusTemp = 100 - P, Malus = MalusTemp / 10. [Malus:2]
%:~ maxPushDamage(Obj,P), MalusTemp = 100 - P, Malus = MalusTemp / 10. [Malus:1]


%pigDistance(O,D) :- boundingBox(O,pig,X,Y,_,_,_), Xquad = X * X, Yquad = Y * Y, D = Xquad + Yquad.
%pigDistance(O,D) :- boundingBox(O,pig,X,Y,_,_,_), D = X + Y.

%:~ target(Pig,T), pigDistance(Pig,D). [D:2]

%firstabove(Down,Under) :- &firstabove[Down,boundingBox](Under), objectType(Down,_).
firstbelow(Upper,Down) :- &firstbelow[Upper,boundingBox](Down), objectType(Upper,_).

abovePig(Under,100) :- firstbelow(Under,Down), objectType(Down,pig).
abovePig(Under,P) :- firstbelow(Under,Down), abovePig(Down,P_D), Ptemp = P_D * 95, P = Ptemp / 100.

fallsOnPigDamage(Obj,P_B) :- maxFallDamage(Obj,P_N), abovePig(Obj,P_P), Ptemp = P_N * P_P, P_B = Ptemp / 100.

existsFallsOnPigDamage(Obj) :- fallsOnPigDamage(Obj,_).
notExistsFallsOnPigDamage(Obj) :- not existsFallsOnPigDamage(Obj), objectType(Obj,_).

%:~ notExistsFallsOnPigDamage(Obj), objectType(Obj,pig). [10:3]
:~ notExistsFallsOnPigDamage(Obj). [10:3]

%:~ fallsOnPigDamage(Obj,P), objectType(Obj,pig), MalusTemp = 100 - P, Malus = MalusTemp / 10. [Malus:3]
:~ fallsOnPigDamage(Obj,P), MalusTemp = 100 - P, Malus = MalusTemp / 10. [Malus:3]

aboveTNT(Under,100) :- firstbelow(Under,Down), objectType(Down,tnt).
aboveTNT(Under,P) :- firstbelow(Under,Down), aboveTNT(Down,P_D), Ptemp = P_D * 95, P = Ptemp / 100.

fallsOnTNTDamage(Obj,P_B) :- maxFallDamage(Obj,P_N), aboveTNT(Obj,P_P), Ptemp = P_N * P_P, P_B = Ptemp / 100.

existsFallsOnTNTDamage(Obj) :- fallsOnTNTDamage(Obj,_).
notExistsFallsOnTNTDamage(Obj) :- not existsFallsOnTNTDamage(Obj), objectType(Obj,_).

%:~ notExistsFallsOnTNTDamage(Obj), objectType(Obj,tnt). [10:3]
:~ notExistsFallsOnTNTDamage(Obj). [10:3]

%:~ fallsOnTNTDamage(Obj,P), objectType(Obj,tnt), MalusTemp = 100 - P, Malus = MalusTemp / 10. [Malus:3]
:~ fallsOnTNTDamage(Obj,P), MalusTemp = 100 - P, Malus = MalusTemp / 10. [Malus:3]

%
%  Data and other background knowledge. Removes ground for streamlining computations
%
ngobject(O,T,A,B,C,D,E) :- boundingBox(O,T,A,B,C,D,E), T != ground.
objectType(O,T) :- ngobject(O,T,_,_,_,_,_).



%
% Percentage perturbations on tap time depending on bird type
%
tap(85) :- birdType(redbird).
tap(90)  :- birdType(yellowbird), target(_,high).
tap(88)  :- birdType(yellowbird), target(_,low).
tap(85)  :- birdType(bluebird).
tap(120) :- birdType(blackbird).
%
% A whitebird not deploying eggs should not tap
%
tap(300)  :- birdType(whitebird).

damageProbability(redbird,pig,100).
damageProbability(bluebird,pig,100).
damageProbability(yellowbird,pig,100).
damageProbability(blackbird,pig,100).
damageProbability(whitebird,pig,100).

damageProbability(redbird,tnt,100).
damageProbability(bluebird,tnt,100).
damageProbability(yellowbird,tnt,100).
damageProbability(blackbird,tnt,100).
damageProbability(whitebird,tnt,100).

damageProbability(redbird,wood,95).
damageProbability(redbird,ice,80).

nogoodForStone(redbird).
nogoodForStone(yellowbird).
nogoodForStone(bluebird).
nogoodForStone(whitebird).

damageProbability(B,stone,0) :- nogoodForStone(B).
damageProbability(blackbird,stone,100).

damageProbability(bluebird,wood,10).
damageProbability(bluebird,ice,100).
damageProbability(yellowbird,wood,100).
damageProbability(yellowbird,ice,10).

damageProbability(blackbird,wood,90).
damageProbability(blackbird,ice,90).

damageProbability(whitebird,wood,90).
damageProbability(whitebird,ice,80).

damageProbability(egg,X,Y) :- damageProbability(blackbird,X,Y1), Y = Y1 -10.

materialFallImportance(wood,90).
materialFallImportance(ice,80).
materialFallImportance(stone,100).

materialFallImportance(pig,100).
materialFallImportance(tnt,100).


energyLoss(redbird,pig,90).
energyLoss(bluebird,pig,90).
energyLoss(yellowbird,pig,90).
energyLoss(blackbird,pig,90).
energyLoss(whitebird,pig,90).

energyLoss(egg,X,Y) :- energyLoss(blackbird,X,Y1), Y = Y1 - 20.

energyLoss(redbird,tnt,90).
energyLoss(bluebird,tnt,90).
energyLoss(yellowbird,tnt,90).
energyLoss(blackbird,tnt,90).
energyLoss(whitebird,tnt,90).

energyLoss(redbird,wood,10).
energyLoss(redbird,ice,10).

energyLoss(B,stone,0) :- nogoodForStone(B).
energyLoss(blackbird,stone,85).

energyLoss(bluebird,wood,0).
energyLoss(bluebird,ice,90).
energyLoss(yellowbird,wood,90).
energyLoss(yellowbird,ice,0).

energyLoss(whitebird,wood,10).
energyLoss(whitebird,ice,10).

energyLoss(blackbird,wood,80).
energyLoss(blackbird,ice,80).

