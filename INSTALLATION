Installation for Ubuntu 13.04 on a 64-bit machine
-------------------------------------------------

The included Makefile is intended to work for the latest Ubuntu release (13.04) on a 64-bit machine.

It provides commands to do a full installation (including the dlvhex solver we rely on) with root privileges:

make install

BEFORE issuing: Please check the aptitude install command in file install-hex.sh in order to avoid unintended interference with the exiting machine setup.
Also you might wish to skip install-opencv.sh (but in this case please ensure a compliant path to the java libraries, cf. the end of this file).

Moreover there are commands that can be used to update our agent software:

make plugin 

for updating the dlvhex plugin our agent uses.

make agent 

to install the java agent (without rebuilding class files and Client.jar),

or

make rebuild 

to install the java agent rebuilding the class files and Client.jar (using ant).


Starting the agent:
-------------------

For starting the agent  please issue

./client.sh <SERVER_IP>


Additional information:
-----------------------

Find below some further information that may be of use if the installation fails or when installing on a different linux platform.


1. Please verify/make sure that the following software packages and libraries are installed:

autoconf
automake
git-core
cmake
wget
pkg-config
libtool
libcurl4-openssl-dev (libcurl-devel)
libzip-dev(el)
libbz2-dev(el)              
libboost-all-dev (boost 1.47)
bmagic (bitmagic)
ant
default-jdk

on Ubuntu we use:
apt-get install aptitude
aptitude install git-core g++ autoconf automake wget cmake pkg-config libtool libcurl4-openssl-dev libzip-dev libbz2-dev libboost-all-dev bmagic libbox2d-dev libopencv-dev python-opencv 


2. Install DLV: By copying the appropriate binary (x86-64-linux-elf-static for 64 bit machines) from 

http://www.dlvsystem.com/dlv/#1

- to the path (/usr/local/bin), 
- making sure that it is executable on the system ("chmod +x" it!), and 
- renaming it to `dlv' or creating  a corresponding softlink to it.


3. Install dlvhex with dlv support: Building the latest version from the github

github.com/hexhex

as follows: 
 
 - cd /tmp
 - git clone --recursive https://github.com/hexhex/core.git
 - cd core
 - ./bootstrap.sh
 - ./configure
 - make
 - make install


4. Build opencv for java support (if not yet done, otherwise please ensure a compliant path to the java libraries, cf. the end of this file).

 - git clone https://github.com/Itseez/opencv.git
 - cd opencv
 - git checkout 2.4
 - cmake -DBUILD_SHARED_LIBS=OFF
 - make 
 - make install


5. Build Box2D version 2.2.1:

 - wget http://box2d.googlecode.com/files/Box2D_v2.2.1.zip
 - unzip Box2D_v2.2.1.zip
 - cd Box2D_v2.2.1/Box2D/Build
 - cmake -D BOX2D_INSTALL=ON -D BOX2D_BUILD_SHARED=ON -D BOX2D_BUILD_STATIC=OFF  ..
 - make
 - make install


6. For installing our agent we use script files (enclosed) that are prepared according to the following assumptions (on paths of the above installations). Please in case let us know any deviations of your installation.

- python2.7 installed to /usr/lib
  (path we use /usr/lib/pymodules/python2.7)
- Box2D installed to /usr
  (path we use /usr/lib)
- OpenCV installed to /usr/lib
  (paths we use /usr/lib and /usr/local/share/OpenCV/java)
- dlvhex installed to /usr/local
  (paths we use /usr/local/include and /usr/local/bin/dlvhex2)
- dlvhex plugin directory exists with write permissions: 
  /usr/local/lib/dlvhex/plugins


